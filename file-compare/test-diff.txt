import org.junit.jupiter.api.Test;                                 import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;                  import static org.junit.jupiter.api.Assertions.*;

class StackTest {                                                  class StackTest {
    @Test                                                              @Test
    void push() {                                                      void push() {
        var stack = new Stack(10);                                         var stack = new Stack(10);
        stack.push(5);                                                     stack.push(5);
        var peeked = stack.peek();                                         var peeked = stack.peek();
        assertTrue(peeked.isPresent());                                    assertTrue(peeked.isPresent());
        assertEquals(peeked.get(), 5);                                     assertEquals(peeked.get(), 5);
        assertEquals(stack.getCurrentSize(), 1);                           assertEquals(stack.getCurrentSize(), 1);
    }                                                                  }

    @Test                                                              @Test
    void pushPastCapacity() {                                          void pushPastCapacity() {
        var stack = new Stack(0);                               |          var stack = new Stack(1);
                                                                >          stack.push(5);
                                                                >          assertEquals(stack.getCapacity(), stack.getCurrentSize(
                                                                >
        Exception exception = assertThrows(RuntimeException.cla            Exception exception = assertThrows(RuntimeException.cla
                () -> {                                                            () -> {
                    stack.push(5);                                                     stack.push(5);
                });                                                                });
                                                                >
        assertEquals(RuntimeException.class, exception.getClass            assertEquals(RuntimeException.class, exception.getClass
    }                                                                  }

    @Test                                                              @Test
    void pop() {                                                       void pop() {
        Stack stack = new Stack(10);                                       Stack stack = new Stack(10);

        // Add one element to the stack                                    // Add one element to the stack
        stack.push(5);                                                     stack.push(5);
        var peeked = stack.peek();                                         var peeked = stack.peek();
        assertTrue(peeked.isPresent());                                    assertTrue(peeked.isPresent());
        assertEquals(peeked.get(), 5);                                     assertEquals(peeked.get(), 5);
        assertEquals(stack.getCurrentSize(), 1);                           assertEquals(stack.getCurrentSize(), 1);
                                                                >          assertEquals(stack.getTopPosition(), 0);
                                                                >
                                                                >          // Add second element to the stack
                                                                >          stack.push(6);
                                                                >          var peekedAgain = stack.peek();
                                                                >          assertTrue(peekedAgain.isPresent());
                                                                >          assertEquals(peekedAgain.get(), 6);
                                                                >          assertEquals(stack.getCurrentSize(), 2);
                                                                >          assertEquals(stack.getTopPosition(), 1);

        // Pop added element from the stack                     |          // Pop second added element from the stack
        var popped = stack.pop();                                          var popped = stack.pop();
        assertTrue(popped.isPresent());                                    assertTrue(popped.isPresent());
        assertEquals(popped.get(), 5);                          |          assertEquals(popped.get(), 6);
                                                                >          assertEquals(stack.getCurrentSize(), 1);
                                                                >          assertEquals(stack.getTopPosition(), 0);
                                                                >
                                                                >          // Pop first added element from the stack
                                                                >          var poppedAgain = stack.pop();
                                                                >          assertTrue(poppedAgain.isPresent());
                                                                >          assertEquals(poppedAgain.get(), 5);
        assertEquals(stack.getCurrentSize(), 0);                           assertEquals(stack.getCurrentSize(), 0);
                                                                >          assertEquals(stack.getTopPosition(), 0);

        // Try to pop an element from the empty stack                      // Try to pop an element from the empty stack
        var poppedAgain = stack.pop();                          |          var poppedAgainAgain = stack.pop();
        assertTrue(poppedAgain.isEmpty());                      |          assertTrue(poppedAgainAgain.isEmpty());
        assertEquals(stack.getCurrentSize(), 0);                           assertEquals(stack.getCurrentSize(), 0);
    }                                                                  }

    @Test                                                              @Test
    void peek() {                                                      void peek() {
        Stack stack = new Stack(10);                                       Stack stack = new Stack(10);

        // Add one element to the stack                                    // Add one element to the stack
        stack.push(5);                                                     stack.push(5);
        var peeked = stack.peek();                                         var peeked = stack.peek();
        assertTrue(peeked.isPresent());                                    assertTrue(peeked.isPresent());
        assertEquals(peeked.get(), 5);                                     assertEquals(peeked.get(), 5);
        assertEquals(stack.getCurrentSize(), 1);                           assertEquals(stack.getCurrentSize(), 1);
    }                                                                  }

    @Test                                                              @Test
    void getCurrentSize() {                                            void getCurrentSize() {
        Stack stack = new Stack(10);                                       Stack stack = new Stack(10);

        // Add one element to the stack                                    // Add one element to the stack
        stack.push(5);                                                     stack.push(5);
        var peeked = stack.peek();                                         var peeked = stack.peek();
        assertTrue(peeked.isPresent());                                    assertTrue(peeked.isPresent());
        assertEquals(peeked.get(), 5);                                     assertEquals(peeked.get(), 5);
        assertEquals(stack.getCurrentSize(), 1);                           assertEquals(stack.getCurrentSize(), 1);
    }                                                                  }

    @Test                                                              @Test
    void getCapacity() {                                               void getCapacity() {
        Stack stack = new Stack(10);                                       Stack stack = new Stack(10);
        assertEquals(stack.getCapacity(), 10);                             assertEquals(stack.getCapacity(), 10);
    }                                                                  }
}                                                                  }