import java.util.ArrayList;                                        import java.util.ArrayList;
import java.util.Optional;                                         import java.util.Optional;

public class Stack {                                               public class Stack {
    private int capacity;                                              private int capacity;
    private int currentSize;                                           private int currentSize;
    private int topPosition;                                           private int topPosition;
    private ArrayList<Integer> stackBuffer;                            private ArrayList<Integer> stackBuffer;

    Stack(int capacity){                                               Stack(int capacity){
        this.capacity = capacity;                                          this.capacity = capacity;
        this.currentSize = 0;                                              this.currentSize = 0;
        this.topPosition = 0;                                              this.topPosition = 0;
        this.stackBuffer = new ArrayList<>();                              this.stackBuffer = new ArrayList<>();
    }                                                                  }

    public void push(int newValue) throws RuntimeException {           public void push(int newValue) throws RuntimeException {
       var newTopPosition = this.topPosition + 1;               |         var newSize = this.currentSize + 1;
       if (newTopPosition > this.capacity) {                    |         if (newSize > capacity) {
           throw new RuntimeException();                                      throw new RuntimeException();
        }                                                                  }
       else {                                                             else {
           this.stackBuffer.add(newValue);                                    this.stackBuffer.add(newValue);
           this.currentSize++;                                                this.currentSize++;
                                                                >             this.topPosition = this.currentSize - 1;
       }                                                                  }
    }                                                                  }

    public Optional<Integer> pop(){                                    public Optional<Integer> pop(){
        if (this.currentSize > 0){                                         if (this.currentSize > 0){
            var poppedValue = this.stackBuffer.remove(this.topP                var poppedValue = this.stackBuffer.remove(this.topP
            this.currentSize--;                                                this.currentSize--;
            if(this.currentSize == 0){                                         if(this.currentSize == 0){
                this.topPosition = 0;                                              this.topPosition = 0;
            }                                                                  }
            else {                                                             else {
                this.topPosition--;                                                this.topPosition--;
            }                                                                  }
            return Optional.of(poppedValue);                                   return Optional.of(poppedValue);
        }                                                                  }
        return Optional.empty();                                           return Optional.empty();
    }                                                                  }

    public Optional<Integer> peek(){                                   public Optional<Integer> peek(){
        if (this.currentSize == 0){                                        if (this.currentSize == 0){
            return Optional.empty();                                           return Optional.empty();
        }                                                                  }
        else{                                                              else{
            return Optional.of(this.stackBuffer.get(this.topPos                return Optional.of(this.stackBuffer.get(this.topPos
        }                                                                  }
                                                                >      }
                                                                >
                                                                >      public int getTopPosition() {
                                                                >          return topPosition;
    }                                                                  }

    public int getCurrentSize() {                                      public int getCurrentSize() {
        return currentSize;                                                return currentSize;
    }                                                                  }

    public int getCapacity() {                                         public int getCapacity() {
        return capacity;                                                   return capacity;
    }                                                                  }
}                                                                  }